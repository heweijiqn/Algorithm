/**
 * @author 何伟健
 * @version 1.0
 * @date 2024/5/20 22:26
 */


package 数组;
import java.util.*;

/*
描述
在一片广阔的草原上，有一群牛正在享受美味的青草。我们可以用一个升序排列的数组 nums
表示这群牛的位置（用整数表示）。由于草原太大，相同位置可能有多头牛，但是牧人希望得知这片草原上不同位置上有多少个牛群。所以他需要你去计算这片草原上不同位置的牛群有多少，并将数组修改为只包含这些不同的位置，且顺序保持一致，然后返回草原上在不同位置的牛群的数量。
示例1
输入：[1, 1, 3, 3, 5, 6]
返回值：4

备注：
注意事项：

你需要在原数组的基础上完成修改，不引入额外的数组空间。操作的空间复杂度必须为 O(1)。
你需要返回草原上不同位置的牛群数量，该数量是数组 nums 修改后的长度。
1 <= nums.length <= 5 * 10^4
0 <= nums[i] <= 200
 */

public class 数组去重 {
    /**
     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
     *
     *
     * @param nums int整型一维数组
     * @return int整型
     */
    public int remove_duplicates (int[] nums) {
        // write code here
        Set<Integer> set = new HashSet<>();
        // 遍历数组，将不重复的位置记录在集合中
        for (int num : nums) {
            set.add(num);
        }
        // 返回集合的大小，即为不同位置的牛群数量
        return set.size();
    }
}
